import asyncio
import logging
import os
import time
from pathlib import Path
from typing import Optional

from telegram import Update, Message
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)
from telegram.constants import ChatAction

from config import settings, SUPPORTED_VIDEO_FORMATS
from video_processor import video_processor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class VideoBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–∞–º–æ–∫"""
    
    def __init__(self):
        self.application = Application.builder().token(settings.bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
        self.application.add_handler(
            MessageHandler(filters.VIDEO, self.handle_video)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        self.application.add_handler(
            MessageHandler(filters.Document.ALL, self.handle_document)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text)
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üé¨ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VideoBot!*

–Ø —É–º–µ—é —Å–∂–∏–º–∞—Ç—å –≤–∏–¥–µ–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç Stories (1080x1920).

üìé *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
‚Ä¢ –ü–æ–ª—É—á–∏—à—å —Å—Ä–∞–∑—É 6 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!
‚Ä¢ –í—Å–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1080x1920 (Stories)

üìã *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
MP4, AVI, MOV, MKV, WEBM, FLV –∏ –¥—Ä—É–≥–∏–µ

‚öôÔ∏è *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–º–∫–∏ —Ä–∞–∑–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
‚Ä¢ 20 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–º–æ–∫ (—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä)
‚Ä¢ –†–∞–∑–º–µ—Ä –≤—Å–µ–≥–¥–∞ 1080x1920 (Stories)
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–æ –ªossless –∫–∞—á–µ—Å—Ç–≤–æ

–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∏ 6 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤! üöÄ
        """
        
        await update.message.reply_text(
            welcome_message, 
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ VideoBot*

üéØ *–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:*
–°–æ–∑–¥–∞–Ω–∏–µ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Stories (1080x1920) —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏

üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

üìê *–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å:*
‚Ä¢ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
‚Ä¢ –†–∞–∑–º–µ—Ä: 1080x1920 (Stories)
‚Ä¢ –ö–∞–∂–¥—ã–π —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–º–∫–æ–π (–æ—Ç —Ç–æ–Ω–∫–æ–π –¥–æ –º–µ–≥–∞-—Ç–æ–ª—Å—Ç–æ–π)
‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ (–æ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
‚Ä¢ 20 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Ä–∞–º–æ–∫ (—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä)
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB (–ª–∏–º–∏—Ç Telegram Bot API)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {formats}

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –§–∞–π–ª—ã –¥–æ 20MB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–¥—ë–∂–Ω–æ
‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
‚Ä¢ Telegram getFile API –∏–º–µ–µ—Ç –∂—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç 20MB

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ 6 –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞: –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ —É–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ
‚Ä¢ –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–æ–∫: –æ—Ç 10px –¥–æ 150px (7 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
‚Ä¢ –ö–æ–¥–µ–∫ H.264 —Å —Ä–∞–∑–Ω—ã–º–∏ CRF (18-30)
‚Ä¢ Bitrate –æ—Ç 400k –¥–æ 2500k
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
        """.format(
            max_size=settings.max_file_size_mb,
            formats=", ".join(sorted(SUPPORTED_VIDEO_FORMATS))
        )
        
        await update.message.reply_text(
            help_message, 
            parse_mode='Markdown'
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats_message = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VideoBot*

üóÇ *–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:*
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: `{temp_dir}`
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: `{output_dir}`

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size}MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {formats_count}

üé≤ *–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω:* {ratios_count}

Bot —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! ‚úÖ
        """.format(
            temp_dir=settings.temp_dir,
            output_dir=settings.output_dir,
            max_size=settings.max_file_size_mb,
            formats_count=len(SUPPORTED_VIDEO_FORMATS),
            ratios_count=len(video_processor.calculate_resize_params.__code__.co_names)
        )
        
        await update.message.reply_text(
            stats_message, 
            parse_mode='Markdown'
        )
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        message = update.message
        video = message.video
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        file_size_mb = video.file_size / (1024 * 1024)
        logger.info(f"üì• –í–ò–î–ï–û –ø–æ–ª—É—á–µ–Ω–æ: {file_size_mb:.2f}MB ({video.file_size} bytes)")
        logger.info(f"üìã –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ: {video.width}x{video.height}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video.duration}—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if video.file_size > settings.max_file_size_mb * 1024 * 1024:
            logger.warning(f"‚ùå –í–ò–î–ï–û –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: —Ä–∞–∑–º–µ—Ä {file_size_mb:.2f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {settings.max_file_size_mb}MB")
            await message.reply_text(
                f"‚ùå –í–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä!\n\n"
                f"üìÅ –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ: {file_size_mb:.1f}MB\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size_mb}MB\n\n"
                f"üí° –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 50MB –∏–ª–∏ –º–µ–Ω—å—à–µ"
            )
            return
        
        # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å 6 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        await self.process_video_file(message, context, video.file_id, 
                                    video.file_name or f"video_{int(time.time())}.mp4", 6)
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)"""
        message = update.message
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º
        if not document.file_name:
            return
        
        file_extension = Path(document.file_name).suffix.lower()
        if file_extension not in SUPPORTED_VIDEO_FORMATS:
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        file_size_mb = document.file_size / (1024 * 1024)
        logger.info(f"üìÑ –î–û–ö–£–ú–ï–ù–¢ –ø–æ–ª—É—á–µ–Ω: {file_size_mb:.2f}MB ({document.file_size} bytes)")
        logger.info(f"üìã –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}, —Ç–∏–ø: {document.mime_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if document.file_size > settings.max_file_size_mb * 1024 * 1024:
            logger.warning(f"‚ùå –î–û–ö–£–ú–ï–ù–¢ –æ—Ç–∫–ª–æ–Ω–µ–Ω: —Ä–∞–∑–º–µ—Ä {file_size_mb:.2f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {settings.max_file_size_mb}MB")
            await message.reply_text(
                f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä!\n\n"
                f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f}MB\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size_mb}MB\n\n"
                f"üí° –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 50MB –∏–ª–∏ –º–µ–Ω—å—à–µ"
            )
            return
        
        # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ-–¥–æ–∫—É–º–µ–Ω—Ç —Å 6 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        await self.process_video_file(message, context, document.file_id, document.file_name, 6)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üé¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª!\n\n"
            "üì± –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å:\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –≤–∏–¥–µ–æ\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å —Å—Ä–∞–∑—É 6 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!\n\n"
            "‚úÖ –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ä–∞–º–∫–æ–π\n"
            "‚úÖ –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤\n"
            "‚úÖ –í—Å–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1080x1920 (Stories)\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    async def process_video_file(self, message: Message, context: ContextTypes.DEFAULT_TYPE, file_id: str, filename: str, variant_count: int = 6):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        user_id = message.from_user.id
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ñ–∞–π–ª: {filename}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await message.reply_text("üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ"
        await message.chat.send_action(ChatAction.UPLOAD_VIDEO)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        timestamp = int(time.time())
        temp_input_path = settings.temp_dir / f"{user_id}_{timestamp}_input_{filename}"
        temp_output_path = settings.output_dir / f"{user_id}_{timestamp}_output.mp4"
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            progress_message = await message.reply_text("üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            
            try:
                file = await context.bot.get_file(file_id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ Bot API
                api_file_size_mb = file.file_size / (1024*1024)
                logger.info(f"üîç Bot API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                logger.info(f"   üìè –†–∞–∑–º–µ—Ä: {api_file_size_mb:.2f}MB ({file.file_size} bytes)")
                logger.info(f"   üìÇ –ü—É—Ç—å: {file.file_path}")
                logger.info(f"   üÜî File ID: {file.file_id}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Bot API  
                if file.file_size > 20 * 1024 * 1024:  # 20MB –∂—ë—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç
                    await progress_message.edit_text(
                        f"‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç!\n\n"
                        f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file.file_size / (1024*1024):.1f}MB\n"
                        f"üìè –õ–∏–º–∏—Ç Telegram Bot API: 20MB (–∂—ë—Å—Ç–∫–∏–π)\n\n"
                        f"üí° –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 20MB –∏–ª–∏ –º–µ–Ω—å—à–µ"
                    )
                    return
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                if file.file_size > 15 * 1024 * 1024:  # 15MB+
                    # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 15MB –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    download_task = asyncio.create_task(file.download_to_drive(temp_input_path))
                    try:
                        await asyncio.wait_for(download_task, timeout=300)  # 5 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    except asyncio.TimeoutError:
                        await progress_message.edit_text(
                            f"‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)!\n\n"
                            f"üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file.file_size / (1024*1024):.1f}MB\n"
                            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
                        )
                        return
                else:
                    await file.download_to_drive(temp_input_path)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if temp_input_path.exists():
                    downloaded_size = temp_input_path.stat().st_size
                    downloaded_size_mb = downloaded_size / (1024*1024)
                    logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω:")
                    logger.info(f"   üìè –†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {downloaded_size_mb:.2f}MB ({downloaded_size} bytes)")
                    logger.info(f"   üìÇ –ü—É—Ç—å: {temp_input_path}")
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                    if abs(downloaded_size - file.file_size) > 1024:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1KB
                        logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! API: {file.file_size} bytes, —Ñ–∞–π–ª: {downloaded_size} bytes")
                else:
                    logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω: {temp_input_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            except Exception as download_error:
                error_msg = str(download_error)
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {error_msg}")
                
                if "File is too big" in error_msg or "too large" in error_msg or "Request Entity Too Large" in error_msg:
                    await progress_message.edit_text(
                        f"‚ùå Telegram –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å —Ç–∞–∫–æ–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª!\n\n"
                        f"üîç –ü—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –§–∞–π–ª –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤ Bot API\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ —Å–∂–∞—Ç–∏—è)\n"
                        f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
                        f"üí° –†–µ—à–µ–Ω–∏—è:\n"
                        f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ 15-20MB\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –í–ò–î–ï–û (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n"
                        f"üì± –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ!"
                    )
                elif "timeout" in error_msg.lower():
                    await progress_message.edit_text(
                        f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞!\n\n"
                        f"üì° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                        f"‚Ä¢ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                    )
                else:
                    await progress_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞!\n\n"
                        f"üîç –î–µ—Ç–∞–ª–∏: {error_msg}\n\n"
                        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    )
                return
            
            await progress_message.edit_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = await video_processor.get_video_info(temp_input_path)
            input_size_mb = temp_input_path.stat().st_size / (1024 * 1024)
            
            # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            await progress_message.edit_text(f"üîÑ –°–æ–∑–¥–∞—é {variant_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ...")
            
            variants = await video_processor.create_multiple_variants(
                temp_input_path, 
                settings.output_dir,
                variant_count
            )
            
            if not variants:
                await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            await progress_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
            
            for i, variant in enumerate(variants):
                try:
                    with open(variant['path'], 'rb') as video_file:
                        await message.reply_video(
                            video=video_file,
                            caption=f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {i+1}/{len(variants)}: {variant['name']}\n\n"
                                   f"üìê –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {video_info['width']}x{video_info['height']}\n"
                                   f"üìê –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: 1080x1920 (Stories)\n"
                                   f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration']:.1f}—Å\n"
                                   f"üìÅ –†–∞–∑–º–µ—Ä: {variant['size_mb']:.1f}MB\n"
                                   f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: CRF {variant['quality']}\n"
                                   f"üé® –¶–≤–µ—Ç —Ä–∞–º–∫–∏: {variant['frame_color']}\n"
                                   f"üñº –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏: {variant['frame_thickness']} ({variant['frame_thickness_px']}px)",
                            supports_streaming=True,
                            read_timeout=60,
                            write_timeout=60
                        )
                except Exception as upload_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {i+1}: {upload_error}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            for variant in variants:
                video_processor.cleanup_temp_files(variant['path'])
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.clear()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            await progress_message.delete()
            return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
            )
        
        finally:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
            await asyncio.sleep(0.5)
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            video_processor.cleanup_temp_files(temp_input_path, temp_output_path)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ VideoBot...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        settings.temp_dir.mkdir(exist_ok=True)
        settings.output_dir.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await self.application.initialize()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.start()
            await self.application.updater.start_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            while True:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not settings.bot_token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return False
    
    bot = VideoBot()
    await bot.run()
    return True


if __name__ == "__main__":
    asyncio.run(main()) 